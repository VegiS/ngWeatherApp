{"version":3,"sources":["scripts/app.js"],"names":["angular","module","openWeatherMap","$resource","apiKey","apiBaseUrl","APPID","mode","callback","units","lang","queryWeather","method","params","path","isArray","headers","x-api-key","queryForecast","queryForecastDaily","subPath","cnt","ipService","$http","get","then","response","$inject","factory","value","filter","version","text","String","replace","input","phvalue","isUndefined","directive","scope","elm","attrs","restrict","useDayForecast","forecast","templateUrl","link","element","getIconImageUrl","iconName","parseDate","time","Date","acmeNavbar","NavbarController","moment","vm","this","relativeDate","creationDate","fromNow","controller","controllerAs","bindToController","MainController","$timeout","toastr","exampleLocations","stormLocations","ISO3166","message","hasState","iconBaseUrl","location","getForecastByLocation","undefined","ipAddress","data","ip","setLocation","loc","runBlock","$log","debug","run","routeConfig","$routeProvider","when","otherwise","redirectTo","config","constant","malarkey","$logProvider","toastrConfig","debugEnabled","allowHtml","timeOut","positionClass","preventDuplicates","progressBar","$templateCache","put"],"mappings":"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","file":"scripts/app-e0d80a70d6.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('ngWeatherApp', ['ngAnimate', 'ngCookies', 'ngTouch', 'ngSanitize', 'ngMessages', 'ngAria', 'ngResource', 'ngRoute', 'toastr','iso-3166-country-codes']);\n\n})();\n\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('ngWeatherApp')\r\n    .factory('openWeatherMap', openWeatherMap)\r\n    .factory('ipService',ipService)\r\n\r\n     //\r\n  // Define a standard list of \"example locations\"\r\n  //\r\n  /** @ngInject */\r\n  .value('exampleLocations',['Boston','San Francisco','Coimbatore','Seekonk','Bangalore','New York','Moscow','Mumbai'])\r\n  //\r\n  // Storm \"Xaver\" special locations\r\n  //\r\n  /** @ngInject */\r\n  .value('stormLocations',['Sylt','St. Peter-Ording','Husum','Bremerhaven','Hamburg','Kiel','LÃ¼beck'])\r\n\r\n    /** @ngInject */\r\n    function openWeatherMap($resource)\r\n    {\r\n\r\n    // API key is currently unused (work either with or without key)\r\n    var apiKey = '279b4be6d54c8bf6ea9b12275a567156';\r\n    var apiBaseUrl = 'http://api.openweathermap.org/data/2.5/';\r\n\r\n    \r\n    return $resource(apiBaseUrl + ':path/:subPath?q=:location',\r\n      {\r\n        APPID: apiKey,\r\n        mode: 'json',\r\n        callback: 'JSON_CALLBACK',\r\n        units: 'metric',\r\n        lang: 'en'\r\n      },\r\n      {\r\n        queryWeather: {\r\n          method: 'JSONP',\r\n          params: {\r\n            path: 'weather'\r\n          },\r\n          isArray: false,\r\n          headers: {\r\n            'x-api-key': apiKey\r\n          }\r\n        },\r\n        queryForecast: {\r\n          method: 'JSONP',\r\n          params: {\r\n            path: 'forecast'\r\n          },\r\n          isArray: false,\r\n          headers: {\r\n            'x-api-key': apiKey\r\n          }\r\n        },\r\n        queryForecastDaily: {\r\n          method: 'JSONP',\r\n          params: {\r\n            path: 'forecast',\r\n            subPath: 'daily',\r\n            cnt: 7\r\n          },\r\n          isArray: false,\r\n          headers: {\r\n            'x-api-key': apiKey\r\n          }\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  function ipService($http)\r\n  {\r\n      return {\r\n        // call to get all nerds\r\n        get : function() {\r\n             $http.get('/api/ip')\r\n                  .then (function (response){\r\n                    return response;\r\n                  });\r\n        }\r\n    }       \r\n  }\r\n\r\n})();\r\n\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('ngWeatherApp')\r\n\r\n    /** @ngInject */\r\n     .filter('interpolate', ['version', function(version) {\r\n    return function(text) {\r\n      return String(text).replace(/\\%VERSION\\%/mg, version);\r\n    }\r\n  }])\r\n   \r\n   /** @ngInject */\r\n  .filter('placeholder', [function() {\r\n    return function (input,phvalue) {\r\n      return (angular.isUndefined(input) || input == '') ? phvalue : input;\r\n    };\r\n  }])\r\n\r\n \r\n})();\r\n\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('ngWeatherApp')\r\n\r\n    /** @ngInject */\r\n      //\r\n  // Simple directive just setting version as elements value (kept from angular-seed dist)\r\n  //\r\n  .directive('appVersion', ['version', function(version) {\r\n    return function(scope, elm, attrs) {\r\n      elm.text(version);\r\n    };\r\n  }])\r\n\r\n  /** @ngInject */\r\n  //\r\n  // Create directive that handles formatting, resource fetching and\r\n  // output of weather data for a specific date\r\n  //\r\n  .directive('weatherPanel',[function factory() {\r\n    return {\r\n      restrict: 'EA',\r\n\r\n      scope: {\r\n        useDayForecast: '=showEntry',\r\n        forecast: '=weatherPanel'\r\n      },\r\n\r\n      templateUrl: 'app/components/weather/partials/_weather-panel-light.html',\r\n\r\n      link: function(scope, element, attrs) {\r\n        // Get icon image url\r\n        scope.getIconImageUrl = function(iconName) {\r\n          return (iconName ? 'http://openweathermap.org/img/w/' + iconName + '.png' : '');\r\n        };\r\n\r\n        scope.parseDate = function (time) {\r\n          return new Date(time * 1000);\r\n        };\r\n      }\r\n    }\r\n  }])\r\n\r\n/** @ngInject */\r\n//\r\n// \"Wind\" edition\r\n//\r\n.directive('weatherPanelWind',[function factory() {\r\n  return {\r\n    restrict: 'EA',\r\n\r\n    scope: {\r\n      useDayForecast: '=showEntry',\r\n      forecast: '=weatherPanel'\r\n    },\r\n\r\n    templateUrl: 'partials/_weather-panel-wind.html',\r\n\r\n    link: function(scope, element, attrs) {\r\n      // Get icon image url\r\n      scope.getIconImageUrl = function(iconName) {\r\n        return (iconName ? 'http://openweathermap.org/img/w/' + iconName + '.png' : '');\r\n      };\r\n\r\n      scope.parseDate = function (time) {\r\n        return new Date(time * 1000);\r\n      };\r\n    }\r\n  }\r\n}]);\r\n \r\n})();\r\n\n(function() {\n  'use strict';\n\n  angular\n    .module('ngWeatherApp')\n    .directive('acmeNavbar', acmeNavbar);\n\n  /** @ngInject */\n  function acmeNavbar() {\n    var directive = {\n      restrict: 'E',\n      templateUrl: 'app/components/navbar/navbar.html',\n      scope: {\n          creationDate: '='\n      },\n      controller: NavbarController,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n\n    return directive;\n\n    /** @ngInject */\n    function NavbarController(moment) {\n      var vm = this;\n\n      // \"vm.creationDate\" is available by directive option \"bindToController: true\"\n      vm.relativeDate = moment(vm.creationDate).fromNow();\n    }\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('ngWeatherApp')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController($http,$timeout, toastr,openWeatherMap,exampleLocations,stormLocations,ISO3166,ipService) {\n    var vm = this;\n\n    vm.message = '';\n    vm.hasState = '';\n\n    // Expose example locations to vm\n    vm.exampleLocations = exampleLocations;\n    vm.stormLocations = stormLocations;\n    vm.iconBaseUrl = 'http://openweathermap.org/img/w/';\n\n    // On initialization load data for first example entry\n    vm.forecast = openWeatherMap.queryForecastDaily({\n      location: exampleLocations[ 0 ]\n    });\n\n    // Get forecast data for location as given in vm.location\n    vm.getForecastByLocation = function() {\n\n      if (vm.location == '' || vm.location == undefined) {\n        vm.hasState = 'has-warning';\n        vm.message = 'Please provide a location';\n        return;\n      }\n\n      vm.hasState = 'has-success';\n\n      vm.forecast = openWeatherMap.queryForecastDaily({\n        location: vm.location\n      });\n    };\n      \n  // ipService.get().then(function (data){\n  //        vm.ipAddress = data.ipAddress;\n  //    });\n\n   $http.get('/api/ip')\n   .then (function (response){\n                   vm.ipAddress =  response.data.ip;\n                  });\n       \n\n    // Set vm.location and execute search on API\n    vm.setLocation = function(loc) {\n      vm.location = loc;\n      vm.getForecastByLocation();\n    };\n\n    // Get icon image url\n    vm.getIconImageUrl = function(iconName) {\n      return (iconName ? vm.iconBaseUrl + iconName + '.png' : '');\n    };\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('ngWeatherApp')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('ngWeatherApp')\n    .config(routeConfig);\n\n  function routeConfig($routeProvider) {\n    $routeProvider\n      .when('/', {\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'main'\n      })\n      .otherwise({\n        redirectTo: '/'\n      });\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('ngWeatherApp')\n    .constant('malarkey', malarkey)\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('ngWeatherApp')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, toastrConfig) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = true;\n    toastrConfig.progressBar = true;\n  }\n\n})();\n\nangular.module(\"ngWeatherApp\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/main/main.html\",\"<div class=container><div><acme-navbar creation-date=main.ipAddress></acme-navbar></div>{{main.ipAddress}}<div class=container><div class=weather-search><div class=row><div class=col-xs-12><div><form class=form-inline role=form><span class=btn-group><button ng-repeat=\\\"item in main.exampleLocations\\\" ng-click=main.setLocation(item) type=submit class=\\\"btn btn-default\\\">{{item}}</button> </span><span class=\\\"form-group {{main.hasState}}\\\"><label class=sr-only for=main.location>City</label><input ng-model=main.location type=text class=form-control id=location placeholder=City> </span><button ng-click=main.getForecastByLocation(main.location) type=submit class=\\\"btn btn-primary\\\">Search!</button> <span ng-show=main.message class=alert><span class=\\\"glyphicon glyphicon-arrow-left\\\">&nbsp;</span>{{main.message}}</span></form></div></div></div></div><div class=weather-data ng-show=true><div class=row><div class=col-xs-12><div><h3>{{main.forecast.city.name |placeholder:\\'?\\'}}, {{main.forecast.city.country | isoCountry}} <small>Lon: {{main.forecast.city.coord.lon | number:2}} Lat: {{main.forecast.city.coord.lat | number:2}} Population: {{main.forecast.city.population | number:0}}</small></h3></div></div></div><div class=row><div class=col-xs-12><div weather-panel=forecast show-entry=main.forecast.list[0]></div></div></div><div class=row><div class=col-xs-4><div weather-panel=forecast show-entry=main.forecast.list[1]></div></div><div class=col-xs-4><div weather-panel=forecast show-entry=main.forecast.list[2]></div></div><div class=col-xs-4><div weather-panel=forecast show-entry=main.forecast.list[3]></div></div></div></div></div></div>\");\n$templateCache.put(\"app/components/navbar/navbar.html\",\"<nav class=\\\"navbar navbar-static-top navbar-inverse\\\"><div class=container-fluid><div class=navbar-header><a class=navbar-brand href=https://github.com/Swiip/generator-gulp-angular><span class=\\\"glyphicon glyphicon-home\\\"></span> Scalable Weather App</a></div><div class=\\\"collapse navbar-collapse\\\" id=bs-example-navbar-collapse-6><ul class=\\\"nav navbar-nav\\\"><li class=active><a ng-href=#>Home</a></li></ul><ul class=\\\"nav navbar-nav navbar-right acme-navbar-text\\\"><li>Application was created {{ vm.relativeDate }}.</li><br></ul></div></div></nav>\");\n$templateCache.put(\"app/components/weather/partials/_weather-panel-light.html\",\"<div class=\\\"weather panel panel-primary\\\"><div class=panel-heading>{{parseDate(useDayForecast.dt) | date:\\'fullDate\\'}}</div><div class=panel-body><div><p class=lead><img ng-src={{getIconImageUrl(useDayForecast.weather[0].icon)}}> {{useDayForecast.temp.day | number:1}}&#176;C {{useDayForecast.weather[0].main}}</p><p>{{useDayForecast.weather[0].description}}&nbsp;&#126;&nbsp; High: {{useDayForecast.temp.max}}&#176;C&nbsp;&#126;&nbsp; Low: {{useDayForecast.temp.min}}&#176;C</p></div></div><div class=panel-footer><small>Day: {{useDayForecast.temp.day}}&#176;C&nbsp;&#126;&nbsp; Night: {{useDayForecast.temp.night}}&#176;C&nbsp;&#126;&nbsp; Pressure: {{useDayForecast.pressure}} hPa&nbsp;&#126;&nbsp; Humidity: {{useDayForecast.humidity}}%</small></div></div>\");\n$templateCache.put(\"app/components/weather/partials/_weather-panel-wind.html\",\"<div class=\\\"weather panel panel-primary\\\"><div class=panel-heading>{{parseDate(useDayForecast.dt) | date:\\'fullDate\\'}}</div><div class=panel-body><div><p class=lead><img ng-src={{getIconImageUrl(useDayForecast.weather[0].icon)}}> Speed: {{ (useDayForecast.speed * 3.6).toFixed(2) }} km/h ({{useDayForecast.speed}} m/s)<br>Pressure: {{useDayForecast.pressure}} hPa</p><p>{{useDayForecast.temp.day | number:1}}&#176;C {{useDayForecast.weather[0].main}}&nbsp;&#126;&nbsp; {{useDayForecast.weather[0].description}}&nbsp;&#126;&nbsp; High: {{useDayForecast.temp.max}}&#176;C&nbsp;&#126;&nbsp; Low: {{useDayForecast.temp.min}}&#176;C</p></div></div><div class=panel-footer><small>Day: {{useDayForecast.temp.day}}&#176;C&nbsp;&#126;&nbsp; Night: {{useDayForecast.temp.night}}&#176;C&nbsp;&#126;&nbsp; Pressure: {{useDayForecast.pressure}} hPa&nbsp;&#126;&nbsp; Humidity: {{useDayForecast.humidity}}%</small></div></div>\");}]);"],"sourceRoot":"/source/"}